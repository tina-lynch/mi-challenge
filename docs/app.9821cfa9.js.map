{"version":3,"sources":["src/utils.js","src/render.js","src/forecastCall.js","src/regionCall.js","src/app.js"],"names":["dateToday","today","Date","dd","getDate","mm","getMonth","getFullYear","dayString","dayIndex","exports","renderCity","cityData","city","region","heading","document","createElement","container","querySelector","innerHTML","toUpperCase","insertBefore","childNodes","classList","add","renderForecast","forecastData","time","icon","summary","temperatureHigh","temperatureLow","ul","newItem","imgs","appendChild","forecastCall","date","latitude","longitude","fetch","then","resp","json","data","daily","slice","map","val","substr","length","dayNumber","getDay","catch","error","console","log","getRegion","zip","String","Math","round","inputZip","submitZip","value","addEventListener","e","preventDefault","remove"],"mappings":"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","file":"app.9821cfa9.js","sourceRoot":"..","sourcesContent":["// /**\n//  *\n//  * @param {number} time - Unix time in seconds returns it in miliseconds\n//  */\n// export function convertDate(time) {\n//   return time * 1000;\n// }\n\n\nconst dateToday = () => {\n  let today = new Date();\n  let dd = (today.getDate() < 10 ? '0' : '') + today.getDate();\n  let mm = (today.getMonth()+1 < 10 ? '0': '') + (today.getMonth()+1);\n  today = mm+'/'+dd+'/'+(today.getFullYear())\n\n  return today;\n}\n\n\nconst dayString = (dayIndex) => [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",][dayIndex] || '';\n\n\n\nexports.dateToday = dateToday;\nexports.dayString = dayString;","import imgs from '../img/*.png';\n\nconst renderCity = (cityData) => {\n    const { city, region } = cityData;\n    const heading = document.createElement('h2');\n    const container = document.querySelector('#app .container')\n\n    heading.innerHTML = `<h2>WEATHER FORECAST FOR ${city.toUpperCase() || ''}, ${region.toUpperCase() || ''}</h2>`\n    container.insertBefore(heading, container.childNodes[0]);\n\n    //remove loader\n    document.querySelector('.loader').classList.add('hide');\n}\n\n\n\nconst renderForecast = (forecastData) => {\n    const { time, icon, summary, temperatureHigh, temperatureLow } = forecastData;\n    const ul = document.querySelector('#app ul')\n    const newItem = document.createElement('li');\n\n    newItem.innerHTML = `<h4 class=\"date\">${time || ''}: </h4>\n        <div class=\"container\">\n        <img src=\"${imgs[icon] || ''}\" alt=\"${icon}\"> \n        <div class=\"forecast\">\n            <p>${summary || 'Please try again later'}</p>\n            <p><span>${temperatureHigh || ''}*</span> / ${temperatureLow || ''}* F</p>\n        </div>\n        </div>\n        `\n    ul.appendChild(newItem)\n}\n\n\n\n\n\nexports.renderForecast = renderForecast;\nexports.renderCity = renderCity;","import { renderForecast } from './render.js';\nimport { dayString } from \"./utils.js\";\n\n\nexport const forecastCall = (cityData, date) => {\n    let { latitude, longitude } = cityData;\n\n    fetch(`https://se-weather-api.herokuapp.com/api/v1/forecast?latitude=${latitude}&longitude=${longitude}&date=${date}`)\n        .then((resp) => resp.json())\n        .then((data) => {\n            // slice data to first 3 items \n            data.daily.data.slice(0,3).map((val) => {  // console.log(val)\n                let { icon, summary, temperatureHigh, temperatureLow, time } = val;\n              \n                //shorten summary, removes \"throughout the day.\"\n                summary = summary.substr(0, summary.length-20);\n                \n                // convert unixtime to day of week, check if 'today' for first <li>\n                const dayNumber = new Date((time) * 1000).getDay();\n                new Date(new Date()).getDay() === dayNumber ? time = 'Today' : time = dayString(dayNumber)\n\n\n                let forecastData = {icon, summary, temperatureHigh, temperatureLow, time}\n                renderForecast(forecastData);\n            })\n               \n        })\n        .catch(error => console.log(error));\n};\n","import { forecastCall } from './forecastCall.js';\nimport { renderCity } from './render.js';\n\n\nexport const getRegion = (zip, date) => {\n    fetch('https://se-weather-api.herokuapp.com/api/v1/geo?zip_code='+zip)\n        .then((resp) => resp.json())\n        .then((data) => {\n                let { city, region, latitude, longitude } = data;\n               \n                latitude = String(Math.round(latitude *100)/100);\n                longitude = String(Math.round(longitude *100)/100);\n                               \n                let cityData = {city, region, latitude, longitude}\n\n                renderCity(cityData)\n                forecastCall(cityData, date)\n        })\n        .catch(error => console.log(error));\n};\n\n","// import \"@babel/polyfill\";\n// import \"@babel/core\";\nimport { dateToday } from \"./utils.js\";\nimport { getRegion } from './regionCall.js';\n\n\n\nconst inputZip = document.querySelector('.zip-container input#zip');\nconst submitZip = document.querySelector('.zip-container input#submit');\nlet date = dateToday();\n// date = '01/28/2021';\n\n\n\ngetRegion(inputZip.value.slice(0, 5), date);\n\n\nsubmitZip.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  if (inputZip.value.length >= 5) {\n    document.querySelector('.loader').classList.remove('hide'); // turn loader on\n    document.querySelector('h2').remove();\n    document.querySelector('#app ul').innerHTML = '';\n\n    getRegion(inputZip.value.slice(0, 5), date);\n  }\n})\n\n"]}